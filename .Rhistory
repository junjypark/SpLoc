plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=TeX('$\\phi=0.3$'))
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=TeX('$\\phi$=0.3'))
x=seq(0, 10, length.out=1000)
phi=0.3; lambda=3
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=TeX('$\\phi$=0.3'))
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0(TeX('$\\phi$'), =0.3))
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0(TeX('$\\phi$'), "=0.3"))
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.3, lambda=3"))
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.1; lambda=3
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.3, lambda=3"))
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=3
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.3, lambda=3"))
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=2
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.3, lambda=3"))
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=1
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.3, lambda=3"))
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=1
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.2, lambda=3"))
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=1
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.2, lambda=3"))
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=1
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.2, lambda=1"))
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.2, lambda=1"), cex.main=1.5)
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.2, lambda=1"), cex.main=1.5, cex.axis=1.3)
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.2, lambda=1"), cex.main=1.5, cex.axis=1.3, cex.lab=1.3)
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=1
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.2, lambda=1"), cex.main=1.5, cex.axis=1.3, cex.lab=1.3)
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=2
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.2, lambda=2"), cex.main=1.5, cex.axis=1.3, cex.lab=1.3)
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=3
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
main=paste0("phi=0.2, lambda=3"), cex.main=1.5, cex.axis=1.3, cex.lab=1.3)
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=1
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
cex.main=1.5, cex.axis=1.3, cex.lab=1.3)
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=2
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
cex.main=1.5, cex.axis=1.3, cex.lab=1.3)
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
x=seq(0, 10, length.out=1000)
phi=0.2; lambda=3
plot(x,expo(phi, x), lwd=3, col="red", lty=2,ylim=c(0,1),
xlab="Distance", ylab="Correlation",type="l",
cex.main=1.5, cex.axis=1.3, cex.lab=1.3)
lines(x, huber(phi, lambda, x), lwd=3, lty=1)
lines(x, gauss(phi, x), type="l", lwd=3, lty=2,col="blue")
lines(x, expo(phi, x), lwd=3, col="red", lty=2)
abline(h=0,v=0)
abline(v=lambda,lty=1, col="gray")
library(SpLoc)
# dataLH0=readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/socialLH_midthickness.rds")
# set.seed(0)
# dataLH=dataLH0[,sample(ncol(dataLH0),40)]
dataLH=readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/socialLH_spherical_test.rds")
fit=SpLoc(dataLH, Matrix(diag(nrow(dataLH)),sparse = T))
fit$permMin
fit$permMax
fit$pvalue
hist(fit$permMax)
library(Rcpp)
setwd("/Users/junyoungpark/Dropbox/Rpackages/SpLoc/SpLocDesktop")
compileAttributes()
fit$threshold
quantile(pmax(abs(fit$permMin),abs(fit$permMax)),0.95)
hist(fit$Tstat)
remove.packages("SpLoc")
library(ddevtools)
library(devtools)
install_github("junjypark/SpLoc")
library(ciftiTools)
library(rgl)
ciftiTools.setOption("wb_path", "/Applications/workbench")
cifti_fname<-"/Users/junyoungpark/Dropbox/Collaborators/Jun/tstat2.dtseries.nii"
surfL_inflated <- "/Users/junyoungpark/Dropbox/My Mac (JUNs-MacBook-Pro.local)/Downloads/HCP_Q1-Q6_GroupAvg_Related440_Unrelated100_v1 2/Q1-Q6_R440.L.very_inflated.32k_fs_LR.surf.gii"
surfR_inflated <- "/Users/junyoungpark/Dropbox/My Mac (JUNs-MacBook-Pro.local)/Downloads/HCP_Q1-Q6_GroupAvg_Related440_Unrelated100_v1 2/Q1-Q6_R440.R.very_inflated.32k_fs_LR.surf.gii"
# surfL_fname <- "/Users/junyoungpark/Dropbox/My Mac (JUNs-MacBook-Pro.local)/Downloads/HCP_Q1-Q6_GroupAvg_Related440_Unrelated100_v1/Q1-Q6_R440.L.midthickness.32k_fs_LR.surf.gii"
# surfR_fname <- "/Users/junyoungpark/Dropbox/My Mac (JUNs-MacBook-Pro.local)/Downloads/HCP_Q1-Q6_GroupAvg_Related440_Unrelated100_v1/Q1-Q6_R440.R.midthickness.32k_fs_LR.surf.gii"
surfL_fname <- "/Users/junyoungpark/Dropbox/My Mac (JUNs-MacBook-Pro.local)/Downloads/standard_mesh_atlases/resample_fsaverage/fs_LR-deformed_to-fsaverage.L.sphere.32k_fs_LR.surf.gii" #demo_files()$surf["left"]
surfR_fname <- "/Users/junyoungpark/Dropbox/My Mac (JUNs-MacBook-Pro.local)/Downloads/standard_mesh_atlases/resample_fsaverage/fs_LR-deformed_to-fsaverage.R.sphere.32k_fs_LR.surf.gii" # demo_files()$surf["right"]
# dataLH0=readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/socialLH_midthickness.rds")
# set.seed(0)
# dataLH=dataLH0[,sample(ncol(dataLH0),40)]
dataLH=readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/socialLH_spherical_test.rds")
dataRH=readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/socialRH_spherical_test.rds")
set.seed(NULL)
xii <- read_cifti(cifti_fname, surfL_fname, surfR_fname, resamp_res = 10242)
library(Matrix)
library(Rcpp)
library(SpLoc)
source("/Users/junyoungpark/Dropbox/Collaborators/Jun/CovReg.R")
#NNmatLH=readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/NNmatLH.rds")
indexLH=readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/indexLH_spherical.rds")
indexRH=readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/indexRH_spherical.rds")
sourceCpp("/Users/junyoungpark/Dropbox/Collaborators/Jun/SpLoc_support2v2.cpp")
# distMatLH= readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/distMat_SphereLH.rds")
distMatLH= readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/distLH.spherical.rds")
distMatLH=distMatLH[indexLH,indexLH]
distMatRH= readRDS("/Users/junyoungpark/Dropbox/Collaborators/Jun/distRH.spherical.rds")
distMatRH=distMatRH[indexRH,indexRH]
sourceCpp("/Users/junyoungpark/Dropbox/Collaborators/Jun/SpLoc_support2v2.cpp")
covfit2RH=covRegOptim(dataRH, distMatRH,kernel = "exponential")
covfit2RH
covfit2LH=covRegOptim(dataLH, distMatLH,kernel = "exponential")
paramsLH=covfit2LH$params
paramsLH
paramsRH
covfit2RH
CovReg=function(epsilon,  distMat, kernel="exponential",qtl=0.5){
#epsilon=p times n
if (kernel=="gaussian"){distMat=distMat^2}
max.distMat=max(distMat)
qtl.distMat=quantile(distMat, qtl)
n=ncol(epsilon); p=nrow(epsilon)
lambda.hat=NULL
if (kernel%in%c("exponential", "gaussian")){
corMat.base=exp(-distMat)
corMat.base=ifelse(distMat<qtl.distMat, corMat.base, 0)
rho.hat=optimize(CovRegOptimC,interval=c(10^-5, 10),epsilon=epsilon, corMat_base=corMat.base)$`minimum`
varcomps=ObtainVarCompsC(rho.hat, epsilon, corMat.base)
}
# else if (kernel=="mixture"){
#   corMat.base1=exp(-distMat)
#   corMat.base2=exp(-distMat^2)
#   corMat.base1=ifelse(distMat0<med.distMat,corMat.base1, 0)
#   corMat.base2=ifelse(distMat0<med.distMat,corMat.base2, 0)
#   rho.hat=optim(c(0.0005,0.0005), CovRegOptimMixtureC, epsilon=epsilon,
#                 corMat_base1=corMat.base1, corMat_base2=corMat.base2, method="L-BFGS-B",
#                 lower=c(1e-10,1e-10),upper=c(10,10))$par
#   varcomps=ObtainVarCompsMixtureC(rho.hat, epsilon, corMat.base1, corMat.base2)
# } else if (kernel=="huber"){
#   cormat0=exp(-distMat^2/2)
#   cormat1=exp(-distMat)
#   cormat0=Matrix(ifelse(distMat<med.distMat, cormat0, 0),sparse=T)
#   cormat1=Matrix(ifelse(distMat<med.distMat, cormat1, 0),sparse=T)
#   CovRegOptimHuber=function(params, epsilon, cormat0, cormat1){
#     rho=params[1]
#     lambda=params[2]
#     v=(cormat1>exp(-lambda))
#     corMat=v*cormat0^rho+(1-v)*cormat1^rho
#     return(CovRegOptimHuberC(epsilon, corMat))
#   }
#   theta.hat=optim(c(0.0005,0.1), CovRegOptimHuber, epsilon=epsilon,
#                 cormat0=cormat0, cormat1=cormat1, method="L-BFGS-B",
#                 lower=c(1e-10,1e-10),upper=c(10,10))$par
#   rho.hat=theta.hat[1];lambda.hat=theta.hat[2]
#   corMat=ifelse(cormat1>exp(-lambda.hat), cormat0^rho.hat, cormat1^rho.hat * exp(-rho.hat*lambda.hat^2/2))
#   varcomps=ObtainVarCompsHuberC(epsilon, corMat)
# }
# params=list(rho=rho.hat, sigma2=varcomps$sigma2, tau2=varcomps$tau2, lambda=lambda.hat)
return(list(rho=rho.hat,
sigma2=varcomps$sigma2,
tau2=varcomps$tau2,
lambda=lambda.hat,
kernel=kernel))
}
CovReg=function(epsilon,  distMat, kernel="exponential",qtl=0.5){
#epsilon=p times n
if (kernel=="gaussian"){distMat=distMat^2}
max.distMat=max(distMat)
qtl.distMat=quantile(distMat, qtl)
n=ncol(epsilon); p=nrow(epsilon)
lambda.hat=NULL
if (kernel%in%c("exponential", "gaussian")){
corMat.base=exp(-distMat)
corMat.base=ifelse(distMat<qtl.distMat, corMat.base, 0)
rho.hat=optimize(CovRegOptimC,interval=c(10^-5, 10),epsilon=epsilon, corMat_base=corMat.base)$`minimum`
varcomps=ObtainVarCompsC(rho.hat, epsilon, corMat.base)
}
# else if (kernel=="mixture"){
#   corMat.base1=exp(-distMat)
#   corMat.base2=exp(-distMat^2)
#   corMat.base1=ifelse(distMat0<med.distMat,corMat.base1, 0)
#   corMat.base2=ifelse(distMat0<med.distMat,corMat.base2, 0)
#   rho.hat=optim(c(0.0005,0.0005), CovRegOptimMixtureC, epsilon=epsilon,
#                 corMat_base1=corMat.base1, corMat_base2=corMat.base2, method="L-BFGS-B",
#                 lower=c(1e-10,1e-10),upper=c(10,10))$par
#   varcomps=ObtainVarCompsMixtureC(rho.hat, epsilon, corMat.base1, corMat.base2)
# } else if (kernel=="huber"){
#   cormat0=exp(-distMat^2/2)
#   cormat1=exp(-distMat)
#   cormat0=Matrix(ifelse(distMat<med.distMat, cormat0, 0),sparse=T)
#   cormat1=Matrix(ifelse(distMat<med.distMat, cormat1, 0),sparse=T)
#   CovRegOptimHuber=function(params, epsilon, cormat0, cormat1){
#     rho=params[1]
#     lambda=params[2]
#     v=(cormat1>exp(-lambda))
#     corMat=v*cormat0^rho+(1-v)*cormat1^rho
#     return(CovRegOptimHuberC(epsilon, corMat))
#   }
#   theta.hat=optim(c(0.0005,0.1), CovRegOptimHuber, epsilon=epsilon,
#                 cormat0=cormat0, cormat1=cormat1, method="L-BFGS-B",
#                 lower=c(1e-10,1e-10),upper=c(10,10))$par
#   rho.hat=theta.hat[1];lambda.hat=theta.hat[2]
#   corMat=ifelse(cormat1>exp(-lambda.hat), cormat0^rho.hat, cormat1^rho.hat * exp(-rho.hat*lambda.hat^2/2))
#   varcomps=ObtainVarCompsHuberC(epsilon, corMat)
# }
# params=list(rho=rho.hat, sigma2=varcomps$sigma2, tau2=varcomps$tau2, lambda=lambda.hat)
return(list(rho=rho.hat,
sigma2=varcomps$sigma2,
tau2=varcomps$tau2,
lambda=lambda.hat,
kernel=kernel,
qtl=qtl))
}
covfit2LH=CovReg(dataLH, distMatLH,kernel = "exponential")
paramsLH=covfit2LH$params
paramsLH
covfit2LH
CovReg=function(epsilon,  distMat, kernel="exponential",qtl=0.5){
#epsilon=p times n
if (kernel=="gaussian"){distMat=distMat^2}
max.distMat=max(distMat)
qtl.distMat=quantile(distMat, qtl)
n=ncol(epsilon); p=nrow(epsilon)
if (kernel%in%c("exponential", "gaussian")){
corMat.base=exp(-distMat)
corMat.base=ifelse(distMat<qtl.distMat, corMat.base, 0)
rho.hat=optimize(CovRegOptimC,interval=c(10^-5, 10),epsilon=epsilon, corMat_base=corMat.base)$`minimum`
varcomps=ObtainVarCompsC(rho.hat, epsilon, corMat.base)
}
# else if (kernel=="mixture"){
#   corMat.base1=exp(-distMat)
#   corMat.base2=exp(-distMat^2)
#   corMat.base1=ifelse(distMat0<med.distMat,corMat.base1, 0)
#   corMat.base2=ifelse(distMat0<med.distMat,corMat.base2, 0)
#   rho.hat=optim(c(0.0005,0.0005), CovRegOptimMixtureC, epsilon=epsilon,
#                 corMat_base1=corMat.base1, corMat_base2=corMat.base2, method="L-BFGS-B",
#                 lower=c(1e-10,1e-10),upper=c(10,10))$par
#   varcomps=ObtainVarCompsMixtureC(rho.hat, epsilon, corMat.base1, corMat.base2)
# } else if (kernel=="huber"){
#   cormat0=exp(-distMat^2/2)
#   cormat1=exp(-distMat)
#   cormat0=Matrix(ifelse(distMat<med.distMat, cormat0, 0),sparse=T)
#   cormat1=Matrix(ifelse(distMat<med.distMat, cormat1, 0),sparse=T)
#   CovRegOptimHuber=function(params, epsilon, cormat0, cormat1){
#     rho=params[1]
#     lambda=params[2]
#     v=(cormat1>exp(-lambda))
#     corMat=v*cormat0^rho+(1-v)*cormat1^rho
#     return(CovRegOptimHuberC(epsilon, corMat))
#   }
#   theta.hat=optim(c(0.0005,0.1), CovRegOptimHuber, epsilon=epsilon,
#                 cormat0=cormat0, cormat1=cormat1, method="L-BFGS-B",
#                 lower=c(1e-10,1e-10),upper=c(10,10))$par
#   rho.hat=theta.hat[1];lambda.hat=theta.hat[2]
#   corMat=ifelse(cormat1>exp(-lambda.hat), cormat0^rho.hat, cormat1^rho.hat * exp(-rho.hat*lambda.hat^2/2))
#   varcomps=ObtainVarCompsHuberC(epsilon, corMat)
# }
# params=list(rho=rho.hat, sigma2=varcomps$sigma2, tau2=varcomps$tau2, lambda=lambda.hat)
return(list(rho=rho.hat,
sigma2=varcomps$sigma2,
tau2=varcomps$tau2,
kernel=kernel,
qtl=qtl))
}
paramsLH=CovReg(dataLH, distMatLH,kernel = "exponential")
paramsRH=CovReg(dataRH, distMatRH,kernel = "exponential")
paramsLH
paramsRH
NNmatLH=build.M.by.radius(distMatLH,max.radius = 20)
NNmatRH=build.M.by.radius(distMatRH,max.radius = 20)
NGPLH=constructNNGPinfo(distMatLH, NN=50)
NGPRH=constructNNGPinfo(distMatRH, NN=50)
NGPmatLH=buildNNGPmat(distMatLH, NGPLH,paramsLH,kernel = "exponential")
NGPmatRH=buildNNGPmat(distMatRH, NGPRH,paramsRH,kernel = "exponential")
y0LH=dataLH
ystarLH=as.matrix(NGPmatLH$NNGPprec%*%dataLH)
y0RH=dataRH
ystarRH=as.matrix(NGPmatRH$NNGPprec%*%dataRH)
alpha=0.05
fitLHb.SpLocPlus=SpLoc(ystarLH,NNmatLH, alternative = "two.sided",alpha = alpha,seed=0)
fitRHb.SpLocPlus=SpLoc(ystarRH,NNmatRH, alternative = "two.sided",alpha = alpha,seed=0)
fitLHb.SpLocPlus$threshold
cb=combine(list(fitLHb.SpLocPlus, fitRHb.SpLocPlus))
cb$threshold
thres=cb$threshold
cl1LH=which(apply(matrix(fitLHp.SpLocPlus$Tstat,ncol(NNmatLH)),1,max)>thres)
cl1LH=which(apply(matrix(fitLHb.SpLocPlus$Tstat,ncol(NNmatLH)),1,max)>thres)
cl2LH=which(apply(matrix(fitLHb.SpLocPlus$Tstat,ncol(NNmatLH)),1,min)< -thres)
cl1RH=which(apply(matrix(fitRHb.SpLocPlus$Tstat,ncol(NNmatRH)),1,max)>thres)
cl2RH=which(apply(matrix(fitRHb.SpLocPlus$Tstat,ncol(NNmatRH)),1,min)< -thres)
surfL_inflated <- "/Users/junyoungpark/Dropbox/My Mac (JUNs-MacBook-Pro.local)/Downloads/HCP_Q1-Q6_GroupAvg_Related440_Unrelated100_v1 2/Q1-Q6_R440.L.very_inflated.32k_fs_LR.surf.gii"
surfR_inflated <- "/Users/junyoungpark/Dropbox/My Mac (JUNs-MacBook-Pro.local)/Downloads/HCP_Q1-Q6_GroupAvg_Related440_Unrelated100_v1 2/Q1-Q6_R440.R.very_inflated.32k_fs_LR.surf.gii"
xii=read_cifti(cifti_fname, surfL_inflated, surfR_inflated, resamp_res = 10242)
xii$data$cortex_left=rep(NA, length(indexLH))
xii$data$cortex_left=rep(NA, length(indexLH))
xii$data$cortex_left[cl1LH]=5
xii$data$cortex_left[cl2LH]=-5
interLH=intersect(cl1LH,cl2LH)
interLH
xii$data$cortex_left=rep(NA, length(indexLH))
xii$data$cortex_left[cl1LH]=5
xii$data$cortex_left[cl2LH]=-5
interLH=intersect(cl1LH,cl2LH)
xii$data$cortex_left[interLH]=ifelse(fitLHp.SpLocPlus$Tstat[interLH]>0,5,-5)
xii$data$cortex_left=as.matrix(xii$data$cortex_left)
view_xifti_surface(xii, hemisphere = "left", zlim=c(-3,3),
xii$data$cortex_left=rep(NA, length(indexLH))
xii$data$cortex_left[cl1LH]=5
xii$data$cortex_left[cl2LH]=-5
interLH=intersect(cl1LH,cl2LH)
xii$data$cortex_left[interLH]=ifelse(fitLHb.SpLocPlus$Tstat[interLH]>0,5,-5)
xii$data$cortex_left=as.matrix(xii$data$cortex_left)
view_xifti_surface(xii, hemisphere = "left", zlim=c(-3,3),
vertex_color="white")#,fname="SpLocPlusLH_Retest.png",legend_embed=F)
xii$data$cortex_right=rep(NA, length(indexRH))
xii$data$cortex_right[cl1RH]=5
xii$data$cortex_right[cl2RH]=-5
interRH=intersect(cl1RH,cl2RH)
interRH
xii$data$cortex_right=rep(NA, length(indexRH))
xii$data$cortex_right[cl1RH]=5
xii$data$cortex_right[cl2RH]=-5
interRH=intersect(cl1RH,cl2RH)
xii$data$cortex_right[interRH]=ifelse(fitRHp.SpLocPlus$Tstat[interRH]>0,5,-5)
xii$data$cortex_right=as.matrix(xii$data$cortex_right)
view_xifti_surface(xii, hemisphere = "right", zlim=c(-3,3),
vertex_color="white")#,fname="SpLocPlusRH_Retest.png",legend_embed=F)
xii$data$cortex_right=rep(NA, length(indexRH))
xii$data$cortex_right[cl1RH]=5
xii$data$cortex_right[cl2RH]=-5
interRH=intersect(cl1RH,cl2RH)
xii$data$cortex_right[interRH]=ifelse(fitRHb.SpLocPlus$Tstat[interRH]>0,5,-5)
xii$data$cortex_right=as.matrix(xii$data$cortex_right)
view_xifti_surface(xii, hemisphere = "right", zlim=c(-3,3),
vertex_color="white")#,fname="SpLocPlusRH_Retest.png",legend_embed=F)
xii$data$cortex_left=rep(NA, length(indexLH))
xii$data$cortex_left[cl1LH]=5
xii$data$cortex_left[cl2LH]=-5
interLH=intersect(cl1LH,cl2LH)
xii$data$cortex_left[interLH]=ifelse(fitLHb.SpLocPlus$Tstat[interLH]>0,5,-5)
xii$data$cortex_left=as.matrix(xii$data$cortex_left)
view_xifti_surface(xii, hemisphere = "left", zlim=c(-3,3),
vertex_color="white")#,fname="SpLocPlusLH_Retest.png",legend_embed=F)
xii$data$cortex_left=rep(NA, length(indexLH))
xii$data$cortex_left[cl1LH]=-5
xii$data$cortex_left[cl2LH]=5
interLH=intersect(cl1LH,cl2LH)
xii$data$cortex_left[interLH]=ifelse(fitLHb.SpLocPlus$Tstat[interLH]>0,-5,5)
xii$data$cortex_left=as.matrix(xii$data$cortex_left)
view_xifti_surface(xii, hemisphere = "left", zlim=c(-3,3),
vertex_color="white")#,fname="SpLocPlusLH_Retest.png",legend_embed=F)
length(fit$Tstat)
length(fitLHb.SpLocPlus$Tstat)
library(Rcpp)
compileAttributes("/Users/junyoungpark/Dropbox/Rpackages/SpLoc/SpLocDesktop")
process=function(fit, threshold=NULL){
if (is.null(threshold)){ threshold=fit$threshold }
alternative=fit$alternative
n.locations=fit$n.locations
cl1=cl2=NULL
if (alternative=="two.sided"){
cl1=which(apply(matrix(fit$Tstat,n.locations),1,max)> thres)
cl2=which(apply(matrix(fit$Tstat,n.locations),1,min)< -thres)
inter=intersect(cl1,cl2)
n.inter=length(inter)
if (n.inter>0){
for (j in 1:n.inter){
if (fit$Tstat[inter[j]]>0){
cl2=setdiff(cl2, inter[j])
} else{
cl1=setdiff(cl1, inter[j])
}
}
}
} else if (alternative=="greater"){
cl1=which(apply(matrix(fitLHb.SpLocPlus$Tstat,n.locations),1,max)> thres)
} else if (alternative=="less"){
cl2=which(apply(matrix(fitLHb.SpLocPlus$Tstat,n.locations),1,min)< thres)
}
return(list(indices.greater=cl1,indices.less=cl2))
}
a=process(fitLHb.SpLocPlus)
fit=fitLHb.SpLocPlus
threshold=fit$threshold
alternative=fit$alternative
n.locations=fit$n.locations
cl1=cl2=NULL
alternative
cl1=which(apply(matrix(fit$Tstat,n.locations),1,max)> thres)
n.locations=ncol(NNmatLH)
cl1=which(apply(matrix(fit$Tstat,n.locations),1,max)> thres)
cl2=which(apply(matrix(fit$Tstat,n.locations),1,min)< -thres)
inter=intersect(cl1,cl2)
n.inter=length(inter)
if (n.inter>0){
for (j in 1:n.inter){
if (fit$Tstat[inter[j]]>0){
cl2=setdiff(cl2, inter[j])
} else{
cl1=setdiff(cl1, inter[j])
}
}
}
cl1
cl2
remove.packages("SpLoc")
